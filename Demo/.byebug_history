c
get organizer_path(@organizer)
sign_in @organizer
@organizer = create(:organizer)
c
 @user = create(:user)
c
get :show, params: {id: organizer.id}
c
raise_error(ActiveRecord::RecordNotFound)
ActiveRecord::RecordNotFound
get :show, params: {id: organizer.id}
   25:       }.to raise_error(ActiveRecord::RecordNotFound)get :show, params: {id: organizer.id}
   24:         get :show, params: {id: organizer.id}
expect{
invalid_id = 9999
c
get :show, params: {id: organizer.id}
organizer = FactoryBot.create(:organizer)
c
get organizer_path(organizer)
organizer = FactoryBot.create(:organizer)
c
 expect(assigns(:organizer)).to eq([organizer])
get organizer_path(organizer)
get organizer_path(organizer
n
organizer = FactoryBot.create(:organizer)
c
organizer = FactoryBot.create(:organizer)
c
organizer = FactoryBot.create(:organizer)
c
 organizer = FactoryBot.create(:organizer)
c
organizer = FactoryBot.create(:organizer)
c
 get :show, params: {id: organizer.id}
organizer = FactoryBot.create(:organizer)
 let(:organizer) { create(:organizer) }
c
organizer = FactoryBot.create(:organizer)
let(:organizer) { create(:organizer) } 
c
booking.valid?
booking.valid?.to be false
booking = Booking.new(no_of_travellers:-1)
c
booking = Booking.new(no_of_traveller:-1)
c
expect(collaborate.errors[:no_of_rooms]).to include("can't be blank")
n
collaborate.valid?
collaborate = Collaborate.new
expect(collaborate.errors[:no_of_rooms]).to include("can't be blank")
c
 expect(collaborate.errors[:no_of_rooms]).to include("be blank")
expect(collaborate.errors[:no_of_rooms]).to include("be blank")
c
expect(collaborate.errors[:no_of_rooms]).to include("can't be blank")
collaborate.valid?
collaborate = Collaborate.new
c
collaborate.valid?
collaborate = Collaborate.new
c
 Message
@messages 
c
n
c
n
                     recipient_id: @recipient.id, recipient_type: recipient_type).order(:created_at)
                     user_id: current_user.id, user_type: current_user.class.name,
                     recipient_id = :current_user.id AND recipient_type = :current_user)', 
                     (sender_id = :recipient_id AND sender_type = :recipient_type AND 
                     recipient_id = :recipient_id AND recipient_type = :recipient_type) OR 
@messages = Message.where('(sender_id = :current_user.id AND sender_type = :user_type AND 
n
@recipient = recipient_type.constantize.find(params[:recipient_id])
recipient_type = params[:recipient_type]
c
link_to 'Delete', [tour.organizer,tour], turbo_method: :delete, data:{confirm:'Are you sure?'}
turbo_method: :delete
link_to 'Delete', [tour.organizer,tour]
link_to 'Delete', [tour.organizer,tour],
c
byebug
=> 29:   end
   28:     byebug
def show
c
link_to 'Delete', [tour.organizer,tour], data: {turbo_method: :delete, turbo_confirm:'Are you sure?'} 
c
 data: {turbo_method: :delete, turbo_confirm:'Are you sure?'}
 [tour.organizer,tour]
 edit_organizer_tour_path(id: tour.id)
organizer_tour_path(id: tour.id)
 tour.destination_name
c
n
PaymentMethod
n
c
n
c
n
 payment_method_id = params[:payment_method_id]
n
c
params
payment_method_id = params[:payment_method_id]
n
amount = @booking.tour.amount * @booking.no_of_travellers
:stripeTokenType
params[:stripeTokenType]
card_detail = params[:stripeTokenType]
n
@booking = Booking.find(params[:id])
 @traveller = Traveller.find(current_user.id)
c
customer = Stripe::Customer.create({name:current_user.name,email:current_user.email,description:"customer id: #{current_user.id}",source: params[:stripeToken]})
customer
params
c
      :source => source
      description: "Customer id: #{current_user.id}",
      email: current_user.email,
      name: current_user.name,
customer = Stripe::Customer.create(
customer
c
n
amount = @booking.tour.amount * @booking.no_of_travellers
 card_detail = params[:stripeTokenType]
source = params[:stripeToken]
source
params
customer
c
@payment
params
c
@payment
params
c
@booking = @traveller.bookings.new(set_params)
params
@traveller
n
@booking = @traveller.bookings.new(set_params)
params
c
params
c
traveller_name 
tour_id
@tour
c
params
@traveller
@tour
tour_id
c
@booking
@traveller
c
@tour
tour
c
@tour
tour_id
c
charge
source = params[:stripeToken]
params
c
   19:       :description => 'Description of booking',
   18:       :amount => @booking.tour.amount * @booking.no_of_travellers,
   17:       :traveller => traveller_id,
   16:       :booking => booking_id,
 charge = Stripe::Charge.create({
Stripe::Charge
source = params[:source]
source
params
c
params[:source]
params
c
charge
@charge
n
params[:source]
params
c
charge = Stripe::Charge.create(amount: amount, currency: 'inr', source: traveller.stripe_token)
c
   19:         description: 'Charge for booking'
   18:         source: traveller.stripe_token,
   17:         currency: 'inr',
   16:         amount: amount,
charge = Stripe::Charge.create(
n
amount: amount,
Stripe::Charge
charge
traveller = @traveller
amount =  calculate_booking_amount(params[:total_amount])
c
@amount = @booking.tour.amount
 @booking = @traveller.bookings.find(params[:id])
@traveller = Traveller.find(current_user.id)
c
a = @booking.save!
a = @booking.save
n
@booking = @traveller.bookings.new(set_params.merge(tour_id:@tour.id))
params
c
@booking = @traveller.bookings.new(set_params.merge(tour_id:@tour.id))
c
traveller_booking_path(id:@booking.id)
a = @booking.save
@booking = @traveller.bookings.new(set_params.merge(tour_id:@tour.id))
c
tours
c
@tours
c
traveller_booking_path(id:@booking.id)
traveller_booking_path
  validates :total_amount_in_cents, numericality: { greater_than_or_equal_to: 0 }
  validates :number_of_participants, numericality: { greater_than: 0 }
@booking
c
@booking = @traveller.bookings.new(set_params.merge(tour_id:@tour.id))
@tour = Tour.find_by(params[:tour_id])
@traveller = Traveller.find(current_user.id)
c
@tour = Tour.find(params[:tour_id])
@traveller = Traveller.find(current_user.id)
c
@booking = @traveller.bookings.new(tour_id:@tour.id)
@tour = Tour.find(params[:tour_id])
@traveller = Traveller.find(current_user.id)
c
@booking = @traveller.bookings.new(set_params.merge(tour_id:@tour.id))
@tour = Tour.find_by(params[:tour_id])
n
c
@traveller.bookings.build(tour_id:@tour.id)
tour_id:@tour.id
c
@tour = Tour.find(params[:tour_id])
n
